{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["project","name","list","todo","description","dueDate","priority","SortForm","props","id","className","type","value","checked","sortBy","onChange","handleChange","htmlFor","Query","placeholder","ListProjects","projects","map","index","active","activeProject","handleActiveClick","editProject","handleClick","handleSwitchProject","Project","onClick","key","Date","now","toString","ProjectAdder","ListTodos","todos","handleEditTodo","handleDelete","handleDeleteTodo","Todo","TodoAdder","ProjectDialogue","initialValues","validate","values","onSubmit","modifyProject","errors","handleSubmit","handleCancel","defaultProps","TodoDialogue","modifyTodo","min","max","App","React","useState","setProjects","setActiveProject","editingProject","setEditingProject","projectDialogue","setProjectDialogue","todoUnderEdit","setTodoUnderEdit","todoDialogue","setTodoDialogue","setSortBy","query","setQuery","update","newProjects","newActiveProject","localStorage","setItem","JSON","stringify","cancelEditProject","cancelEditTodo","slice","newProject","find","splice","indexOf","toggleProjectDialogue","toggleTodoDialogue","useEffect","parse","getItem","event","target","lowerCaseQuery","toLowerCase","filter","includes","filterTodos","sort","a","b","push","unshift","todoIndex","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8048732f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Formik} from 'formik';\r\nimport './App.css';\r\n\r\nconst project = (name) => ({name, list: []});\r\nconst todo = (name, description, dueDate, priority) => ({name, description, dueDate, priority});\r\n\r\nconst SortForm = (props) => <form>\r\n    <input\r\n        id='name'\r\n        className='sort'\r\n        type='radio'\r\n        name='sort-by'\r\n        value='name'\r\n        checked={props.sortBy === 'name'}\r\n        onChange={props.handleChange}\r\n    />\r\n    <label\r\n        className='sort'\r\n        htmlFor='name'\r\n    >\r\n        Name\r\n    </label>\r\n    <input\r\n        id='due-date'\r\n        className='sort'\r\n        type='radio'\r\n        name='sort-by'\r\n        value='dueDate'\r\n        checked={props.sortBy === 'dueDate'}\r\n        onChange={props.handleChange}\r\n    />\r\n    <label\r\n        className='sort'\r\n        htmlFor='due-date'\r\n    >\r\n        Due Date\r\n    </label>\r\n    <input\r\n        id='priority'\r\n        className='sort'\r\n        type='radio'\r\n        name='sort-by'\r\n        value='priority'\r\n        checked={props.sortBy === 'priority'}\r\n        onChange={props.handleChange}\r\n    />\r\n    <label\r\n        className='sort'\r\n        htmlFor='priority'\r\n    >\r\n        Priority\r\n    </label>\r\n</form>;\r\nconst Query = (props) => <input\r\n    id='query-box'\r\n    type='text'\r\n    placeholder='query'\r\n    onChange={props.handleChange}\r\n/>;\r\n\r\nconst ListProjects = (props) => props.projects.map((project, index) =>\r\n    <Project\r\n        active={project === props.activeProject}\r\n        name={project.name}\r\n        handleActiveClick={props.editProject}\r\n        handleClick={props.handleSwitchProject(project)}\r\n        index={index}\r\n    />);\r\nconst Project = (props) => props.active ?\r\n    <li\r\n        className='active'\r\n        onClick={props.handleActiveClick}\r\n        key={(Date.now() + props.index).toString(36)}\r\n    >\r\n        {props.name}\r\n    </li>\r\n    : <li\r\n        onClick={props.handleClick}\r\n        key={(Date.now() + props.index).toString(36)}\r\n    >\r\n        {props.name}\r\n    </li>;\r\nconst ProjectAdder = (props) =>\r\n    <li\r\n        id='new-project'\r\n        onClick={props.handleClick}\r\n        key={(Date.now() - 1).toString(36)}\r\n    >\r\n        + project\r\n    </li>;\r\n\r\nconst ListTodos = (props) => props.todos.map((todo, index) =>\r\n    <Todo\r\n        name={todo.name}\r\n        description={todo.description}\r\n        dueDate={todo.dueDate}\r\n        priority={todo.priority}\r\n        handleClick={props.handleEditTodo(todo)}\r\n        handleDelete={props.handleDeleteTodo(todo)}\r\n        index={index}\r\n    />);\r\nconst Todo = (props) =>\r\n    <li\r\n        className={'todo priority-' + props.priority}\r\n        key={(Date.now() + props.index).toString(36)}\r\n    >\r\n        <div className='delete' onClick={props.handleDelete}/>\r\n        <div\r\n            className='todo-body'\r\n            onClick={props.handleClick}\r\n        >\r\n            <div className='name'>{props.name}</div>\r\n            <div className='description'>{props.description}</div>\r\n            <div className='due-date'>{props.dueDate}</div>\r\n        </div>\r\n    </li>;\r\nconst TodoAdder = (props) =>\r\n    <li\r\n        className='todo priority-5'\r\n        onClick={props.handleClick}\r\n        key={(Date.now() - 1).toString(36)}\r\n    >\r\n        + todo\r\n    </li>;\r\n\r\nconst ProjectDialogue = (props) =>\r\n    <div className='veil'>\r\n        <Formik\r\n            initialValues={{name: props.name}}\r\n            validate={values => values.name ? {} : {name: '^ name required'}}\r\n            onSubmit={values => props.modifyProject(values.name)}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  handleChange,\r\n                  handleSubmit,\r\n              }) => (\r\n                <form\r\n                    className='form'\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        placeholder='Project name'\r\n                        onChange={handleChange}\r\n                        value={values.name}\r\n                    />\r\n                    {errors.name}\r\n                    <button\r\n                        type='submit'\r\n                        className='submit'\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                    <button\r\n                        className='cancel'\r\n                        onClick={props.handleCancel}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    </div>;\r\nProjectDialogue.defaultProps = {name: ''};\r\nconst TodoDialogue = (props) =>\r\n    <div className='veil'>\r\n        <Formik\r\n            initialValues={{\r\n                name: props.name,\r\n                description: props.description,\r\n                dueDate: props.dueDate,\r\n                priority: props.priority,\r\n            }}\r\n            validate={values => {\r\n                const errors = {};\r\n                if (!values.name) errors.name = '^ name required';\r\n                if (!values.dueDate) errors.dueDate = '^ due date required';\r\n                if (values.priority < 1 || values.priority > 5) errors.priority = '^ priority must be between 1 and 5';\r\n                return errors;\r\n            }}\r\n            onSubmit={values => props.modifyTodo(values.name, values.description, values.dueDate, values.priority)}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  handleChange,\r\n                  handleSubmit,\r\n              }) => (\r\n                <form\r\n                    className='form'\r\n                    onSubmit={handleSubmit}\r\n                >\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        placeholder='Name'\r\n                        onChange={handleChange}\r\n                        value={values.name}\r\n                    />\r\n                    {errors.name}\r\n                    <textarea\r\n                        name='description'\r\n                        placeholder='Description'\r\n                        onChange={handleChange}\r\n                        value={values.description}\r\n                    />\r\n                    <input\r\n                        type='date'\r\n                        name='dueDate'\r\n                        onChange={handleChange}\r\n                        value={values.dueDate}\r\n                    />\r\n                    {errors.dueDate}\r\n                    <input\r\n                        type='number'\r\n                        min={1}\r\n                        max={5}\r\n                        name='priority'\r\n                        onChange={handleChange}\r\n                        value={values.priority}\r\n                    />\r\n                    {errors.priority}\r\n                    <button\r\n                        type='submit'\r\n                        className='submit'\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                    <button\r\n                        className='cancel'\r\n                        onClick={props.handleCancel}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    </div>;\r\nTodoDialogue.defaultProps = {name: '', description: '', dueDate: '', priority: 3};\r\n\r\nconst App = () => {\r\n    const [projects, setProjects] = React.useState([]);\r\n    const [activeProject, setActiveProject] = React.useState(null);\r\n    const [editingProject, setEditingProject] = React.useState(false);\r\n    const [projectDialogue, setProjectDialogue] = React.useState(false);\r\n    const [todoUnderEdit, setTodoUnderEdit] = React.useState(null);\r\n    const [todoDialogue, setTodoDialogue] = React.useState(false);\r\n    const [sortBy, setSortBy] = React.useState('name');\r\n    const [query, setQuery] = React.useState('');\r\n\r\n    const handleSortChange = (event) => setSortBy(event.target.value);\r\n    const handleQueryChange = (event) => setQuery(event.target.value);\r\n    const filterTodos = () => {\r\n        const lowerCaseQuery = query.toLowerCase();\r\n        return activeProject.list.filter(todo =>\r\n            todo.name.toLowerCase().includes(lowerCaseQuery)\r\n            || todo.description.toLowerCase().includes(lowerCaseQuery));\r\n    };\r\n\r\n    const update = (newProjects, newActiveProject) => {\r\n        setProjects(newProjects);\r\n        setActiveProject(newActiveProject);\r\n        localStorage.setItem('projects', JSON.stringify(projects));\r\n    };\r\n\r\n    const editProject = () => setEditingProject(true);\r\n    const cancelEditProject = () => setEditingProject(false);\r\n    const addProject = (name) => {\r\n        const newProjects = projects.slice();\r\n        const newProject = project(name);\r\n        newProjects.push(newProject);\r\n        update(newProjects, newProject);\r\n        toggleProjectDialogue();\r\n    };\r\n    const updateProject = (name) => {\r\n        const newProjects = projects.slice();\r\n        const newProject = newProjects.find(project => project === activeProject);\r\n        newProject.name = name;\r\n        update(newProjects, newProject);\r\n        cancelEditProject();\r\n    };\r\n    const handleSwitchProject = project => () => setActiveProject(project);\r\n    const deleteProject = () => {\r\n        const newProjects = projects.slice();\r\n        newProjects.splice(newProjects.indexOf(activeProject), 1);\r\n        update(newProjects, null);\r\n    };\r\n\r\n    const handleEditTodo = todo => () => setTodoUnderEdit(todo);\r\n    const cancelEditTodo = () => setTodoUnderEdit(null);\r\n    const addTodo = (name, description, dueDate, priority) => {\r\n        const newProjects = projects.slice();\r\n        const newProject = newProjects.find(project => project === activeProject);\r\n        newProject.list.unshift(todo(name, description, dueDate, priority));\r\n        update(newProjects, newProject);\r\n        toggleTodoDialogue();\r\n    };\r\n    const updateTodo = (name, description, dueDate, priority) => {\r\n        const newProjects = projects.slice();\r\n        const newProject = newProjects.find(project => project === activeProject);\r\n        const todoIndex = newProject.list.indexOf(todoUnderEdit);\r\n        newProject.list[todoIndex] = todo(name, description, dueDate, priority);\r\n        update(newProjects, newProject);\r\n        cancelEditTodo();\r\n    };\r\n    const handleDeleteTodo = todo => () => {\r\n        const newProjects = projects.slice();\r\n        const newProject = newProjects.find(project => project === activeProject);\r\n        newProject.list.splice(newProject.list.indexOf(todo), 1);\r\n        update(newProjects, newProject);\r\n        cancelEditTodo();\r\n    };\r\n\r\n    const toggleProjectDialogue = () => setProjectDialogue(!projectDialogue);\r\n    const toggleTodoDialogue = () => setTodoDialogue(!todoDialogue);\r\n\r\n    React.useEffect(() => {\r\n        setProjects(JSON.parse(localStorage.getItem('projects')) || [project('Default')]);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <div id='app-name'>To-do</div>\r\n                <nav>\r\n                    <ul>\r\n                        <ListProjects\r\n                            activeProject={activeProject}\r\n                            projects={projects}\r\n                            editProject={editProject}\r\n                            handleSwitchProject={handleSwitchProject}\r\n                        />\r\n                        <ProjectAdder handleClick={toggleProjectDialogue}/>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n            <main>\r\n                <div id='queries'>\r\n                    <SortForm\r\n                        sortBy={sortBy}\r\n                        handleChange={handleSortChange}\r\n                    />\r\n                    <Query handleChange={handleQueryChange}/>\r\n                </div>\r\n                <ul>\r\n                    {activeProject\r\n                    && (query ?\r\n                        <ListTodos\r\n                            todos={filterTodos().sort((a, b) => a[sortBy] < b[sortBy] ? -1 : 1)}\r\n                            handleEditTodo={handleEditTodo}\r\n                            handleDeleteTodo={handleDeleteTodo}\r\n                        />\r\n                        : <ListTodos\r\n                            todos={activeProject.list.sort((a, b) => a[sortBy] < b[sortBy] ? -1 : 1)}\r\n                            handleEditTodo={handleEditTodo}\r\n                            handleDeleteTodo={handleDeleteTodo}\r\n                        />)}\r\n                    {activeProject && !query && <TodoAdder handleClick={toggleTodoDialogue}/>}\r\n                </ul>\r\n                {activeProject\r\n                && !query\r\n                && <button\r\n                    id='delete-project'\r\n                    onClick={deleteProject}\r\n                >\r\n                    Delete project\r\n                </button>}\r\n            </main>\r\n            {projectDialogue && <ProjectDialogue\r\n                modifyProject={addProject}\r\n                handleCancel={toggleProjectDialogue}\r\n            />}\r\n            {editingProject && <ProjectDialogue\r\n                name={activeProject.name}\r\n                modifyProject={updateProject}\r\n                handleCancel={cancelEditProject}\r\n            />}\r\n            {todoDialogue && <TodoDialogue\r\n                modifyTodo={addTodo}\r\n                handleCancel={toggleTodoDialogue}\r\n            />}\r\n            {todoUnderEdit && <TodoDialogue\r\n                name={todoUnderEdit.name}\r\n                description={todoUnderEdit.description}\r\n                dueDate={todoUnderEdit.dueDate}\r\n                priority={todoUnderEdit.priority}\r\n                modifyTodo={updateTodo}\r\n                handleCancel={cancelEditTodo}\r\n            />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}